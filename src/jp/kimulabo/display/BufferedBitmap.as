package jp.kimulabo.display {		import flash.display.Bitmap;	import flash.display.BitmapData;		/*--------------------------------------------------	* 連続したコマのBitmapDataを管理するクラス	--------------------------------------------------*/	public class BufferedBitmap extends Bitmap {				/*--------------------------------------------------		* インスタンス変数		--------------------------------------------------*/				public var bufferSize:uint;		//バッファサイズ（0の場合は上限なし）		public var noReverse:Boolean = true;		private var _buffer:Vector.<BitmapData> = new Vector.<BitmapData>();		private var _frame:uint = 0;				/*--------------------------------------------------		* コンストラクタ		--------------------------------------------------*/		public function BufferedBitmap( i_bufferSize:uint = 0 ) {			bufferSize = i_bufferSize;		}				/*--------------------------------------------------		* push		--------------------------------------------------*/		public function push( i_bitmapData:BitmapData ):void {			_buffer.push( i_bitmapData );			while ( _buffer.length > bufferSize ) _buffer.shift();		}				/*--------------------------------------------------		* unshift		--------------------------------------------------*/		public function unshift( i_bitmapData:BitmapData ):void {			_buffer.unshift( i_bitmapData );			while ( _buffer.length > bufferSize ) _buffer.pop();		}								/*--------------------------------------------------		* frame		--------------------------------------------------*/		public function get frame():uint { return _frame; }		public function set frame( i_value:uint ):void {			if ( noReverse && i_value < _frame - 1 ) i_value = _frame - 1;			_frame = i_value;			if ( i_value >= _buffer.length ) i_value = _buffer.length - 1;			bitmapData = _buffer[i_value];		}	}}
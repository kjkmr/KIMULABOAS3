package jp.kimulabo.display.bezier {		import flash.display.Graphics;	import flash.geom.Point;	import fl.motion.BezierSegment;		/*--------------------------------------------------	* ３次ベジェ曲線のパスのデータのシェイプトゥイーン	--------------------------------------------------*/		public class PathMotion {				/*--------------------------------------------------		* 定数		--------------------------------------------------*/				/*--------------------------------------------------		* インスタンス変数		--------------------------------------------------*/		private var _graphics:Graphics;		private var _path:BezierPath;		private var _from:BezierPath;		private var _to:BezierPath;		private var _position:Number = 0;				/*--------------------------------------------------		* コンストラクタ		--------------------------------------------------*/		public function PathMotion( i_graphics:Graphics, i_from:BezierPath = null, i_to:BezierPath = null ) {			_graphics = i_graphics;			from = i_from;			to = i_to;		}				/*--------------------------------------------------		* getter & setter for from / to		--------------------------------------------------*/		public function get from():BezierPath { return _from; }		public function set from( i_value:BezierPath ):void {			_from = i_value;			if ( _from ) _path = _from.clone();			adjustLength();			position = _position;		}				public function get to():BezierPath { return _to; }		public function set to( i_value:BezierPath ):void {			_to = i_value;			adjustLength();			position = _position;		}				public function adjustLength():void {			if ( !_from || !_to || !_path ) return;			_from.length = _to.length;			_to.length = _from.length;			_path.length = _from.length;		}				/*--------------------------------------------------		* getter & setter for position		--------------------------------------------------*/		public function get position():Number { return _position; }		public function set position( i_value:Number ):void {			if ( !_from || !_to ) return;			_position = i_value;			var i:uint, l:uint = _path.length;			var a:Anchor, from:Anchor, to:Anchor;						for ( i=0; i<l; i++ ) {				a = _path.anchors[i];				from = _from.anchors[i];				to = _to.anchors[i];				a.x = from.x + ( to.x - from.x ) * _position;				a.y = from.y + ( to.y - from.y ) * _position;				a.prevX = from.prevX + ( to.prevX - from.prevX ) * _position;				a.prevY = from.prevY + ( to.prevY - from.prevY ) * _position;				a.nextX = from.nextX + ( to.nextX - from.nextX ) * _position;				a.nextY = from.nextY + ( to.nextY - from.nextY ) * _position;			}			_path.redraw( _graphics );		}					}}
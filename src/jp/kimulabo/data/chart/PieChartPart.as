package jp.kimulabo.data.chart {		import flash.display.Sprite;	import jp.kimulabo.utils.NumberFormatter;		/*--------------------------------------------------	* 円グラフを構成するパーツ	--------------------------------------------------*/	public class PieChartPart extends ChartPart {				/*--------------------------------------------------		* インスタンス変数		--------------------------------------------------*/		public var percent:Number;		public var start:Number = 0;		private var _radius:Number;				/*--------------------------------------------------		* コンストラクタ		--------------------------------------------------*/		public function PieChartPart( i_radius:Number, i_value:Number, i_color:uint, i_tooltipContainer:Sprite, i_unit:String = "" ) {			_radius = i_radius;			super( i_value, i_color, i_tooltipContainer, i_unit );		}						/*--------------------------------------------------		* 描画し直し		--------------------------------------------------*/		public function draw():void {						graphics.clear();						if ( !percent ) return;						//扇形の描画			graphics.beginFill( _color );			graphics.moveTo( 0,0 );						var i:uint;			var tx:Number, ty:Number;			var split:uint = percent * _radius * 2 >> 0;	//分割数			if ( split < 10 ) split = 10;			var startRad:Number = Math.PI * 2 * start - Math.PI * 0.5;		//開始位置ラジアン			var rad:Number = Math.PI * 2 * percent ;		//ラジアン			var radStep:Number = rad / ( split - 1);		//分割したラジアン			var r:Number;						for ( i=0; i<split; i++ ) {				r = startRad + radStep * i;				tx = Math.cos(r) * _radius;				ty = Math.sin(r) * _radius;				graphics.lineTo( tx, ty );			}						graphics.lineTo( 0, 0 );			graphics.endFill();									//区切り線の描画			if ( percent > 0.005 ) {				graphics.lineStyle( 1, 0xffffff, 1, true );				graphics.moveTo( Math.cos(startRad + rad) * _radius, Math.sin(startRad + rad) * _radius );				graphics.lineTo( 0, 0 );				graphics.lineTo( Math.cos(startRad) * _radius, Math.sin(startRad) * _radius );			}						//ツールチップ表示の更新			var p:Number = parseFloat( Math.round( percent * 1000 ).toString().replace(/([0-9])$/,".$1") );			spec = NumberFormatter.format(_value) + _unit + " [ " + p + "% ] ";					}			}}
package jp.kimulabo.transitions {		import flash.events.EventDispatcher;	import flash.events.Event;	import flash.utils.Dictionary;		import jp.kimulabo.utils.TimeKeeper;			public class TimeLine extends EventDispatcher {			/*--------------------------------------------------		* プロパティ		--------------------------------------------------*/		public var loop:Boolean = false;		public var slaveIn:Number = 0;		public var slaveOut:Number;		public var scale:Number = 1;				private var _timeKeeper:TimeKeeper;		private var _time:Number = 0;		private var _duration:Number = NaN;		private var _calcuratedDuration:Number = 0;				//		private var _slave:Boolean = false;						//		private var _tweens:Dictionary = new Dictionary( true );		private var _slaves:Dictionary = new Dictionary( true );				/*--------------------------------------------------		* コンストラクタ		--------------------------------------------------*/		public function TimeLine( i_timeKeeper:TimeKeeper = null ) {			_timeKeeper = i_timeKeeper;		}						/*--------------------------------------------------		* Getter & Setter for duration		--------------------------------------------------*/				public function get duration():Number {			return isNaN( _duration ) ? _calcuratedDuration : _duration;		}				public function set duration( i_value:Number ):void {			_duration = i_value;		}				/*--------------------------------------------------		* Getter & Setter for time		--------------------------------------------------*/		public function get time():Number { return _time; }		public function set time( i_value:Number ):void {			/*			var d:Number = duration;			if ( i_value > d ) i_value = d;			*/			_time = i_value;			if ( _timeKeeper ) _timeKeeper.time = i_value;			_update();		}				/*--------------------------------------------------		* Getter & Setter for slave		--------------------------------------------------*/		public function get slave():Boolean { return _slave; }		public function set slave( i_value:Boolean ):void {			_slave = i_value;			if ( ! _slave && _timeKeeper ) _timeKeeper.stop();		}				/*--------------------------------------------------		* 再生／停止		--------------------------------------------------*/		public function start( i_time:Number = NaN, i_scale:Number = NaN ):void {			if ( _slave ) return;			if ( !duration ) return;			if ( !_timeKeeper ) _timeKeeper = new TimeKeeper( _update, _time );			if ( !isNaN(i_time) ) time = i_time;			if ( !isNaN(i_scale) ) scale = i_scale;			_timeKeeper.start();			dispatchEvent( new TimeLineEvent( TimeLineEvent.START ) );		}				public function stop():void {			if ( _slave ) return;			if ( _timeKeeper ) _timeKeeper.stop();			dispatchEvent( new TimeLineEvent( TimeLineEvent.STOP ) );		}				/*--------------------------------------------------		* 更新		--------------------------------------------------*/		private function _update( i_event:Event = null ):void {			if ( _timeKeeper ) _time = _timeKeeper.time;						var properties:Object;			var tween:TimeLineTween;						var d:Number = duration;			var time:Number = _time * scale;						if ( _slave ) {				if ( !isNaN(slaveOut) && slaveOut > slaveIn && time > slaveOut ) time = slaveOut - slaveIn;				else time -= slaveIn;				if ( slaveIn && time < 0 ) time = 0;			}						if ( loop ) {				while ( time > d ) time -= d;				while ( time < 0 ) time += d;			}						//各Tweenの更新			for each ( properties in _tweens ) {				for each ( tween in properties ) tween.update(time);			}						//子TimeLineの更新			var child:TimeLine;			for each ( child in _slaves ) child.time = time;						//slaveの場合はここまで			if ( _slave ) return;						//			if ( _time >= d ) {				if ( loop && _timeKeeper && _timeKeeper.playing ) {					dispatchEvent( new TimeLineEvent( TimeLineEvent.LOOP ) );					while ( _time >= d ) _time -= d;					time = _time;				} else {					dispatchEvent( new TimeLineEvent( TimeLineEvent.COMPLETE ) );					stop();				}			}		}				/*--------------------------------------------------		* TimeLineの追加		--------------------------------------------------*/		public function addSlave( i_timeLine:TimeLine ):void {			i_timeLine.stop();			i_timeLine.slave = true;			i_timeLine.time = time;			_slaves[i_timeLine] = i_timeLine;			_calcurateDuration();		}				public function removeSlave( i_timeLine:TimeLine ):void {			if ( _slaves[i_timeLine] ) delete _slaves[i_timeLine];			i_timeLine.slave = false;			_calcurateDuration();		}						/*--------------------------------------------------		* Tweenの追加		--------------------------------------------------*/		public function addTween( i_obj:*, i_property:String, i_cues:Array, i_delay:Number = 0, i_duration:Number = NaN ):void {			if ( !_tweens[i_obj] ) _tweens[i_obj] = {};			var t:TimeLineTween = new TimeLineTween( i_obj, i_property, i_cues, i_delay, i_duration );			t.update( _time );			_tweens[i_obj][i_property] = t;			_calcurateDuration();		}				/*--------------------------------------------------		* Tweenの削除		--------------------------------------------------*/		public function removeTween( i_obj:* = null, i_property:String = "" ):void {			if ( !i_obj ) {				_tweens = new Dictionary( true );				_calcurateDuration();				return;			}			if ( _tweens[i_obj] ) {				if ( i_property ) {					if ( _tweens[i_obj].hasOwnProperty(i_property) ) delete _tweens[i_obj][i_property];				} else {					delete _tweens[i_obj];				}			}			_calcurateDuration();		}				/*--------------------------------------------------		* durationの計算		--------------------------------------------------*/		private function _calcurateDuration():void {			_calcuratedDuration = 0;						var properties:Object;			var tween:TimeLineTween;						//各Tweenの更新			for each ( properties in _tweens ) {				for each ( tween in properties ) {					if ( _calcuratedDuration < tween.end ) _calcuratedDuration = tween.end;				}			}						//子TimeLineの更新			var child:TimeLine;			var cd:Number;			for each ( child in _slaves ) {				cd = child.duration				if ( _calcuratedDuration < cd ) _calcuratedDuration = cd;			}					}				/*--------------------------------------------------		* clone		--------------------------------------------------*/			}	}
package {	import flash.display.Sprite;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.events.Event;	import flash.geom.Matrix;	import jp.kimulabo.utils.PhaseLoader;	import jp.kimulabo.utils.LoadingPhase;	import jp.kimulabo.utils.ResizeManager;	import caurina.transitions.Tweener;	import com.bit101.components.ProgressBar;		public class BasicUsage01 extends Sprite {				/*--------------------------------------------------		* 定数		--------------------------------------------------*/		public static const XML_PATH:String = "data/index.xml";		public static const LOADING_PHASES:Array = [			new LoadingPhase( "xml", [ XML_PATH ], 0.1 ),			new LoadingPhase( "asset", [], 0.9 )		];				public static const THUMBNAIL_SIZE:uint = 160;				/*--------------------------------------------------		* プロパティ		--------------------------------------------------*/		private var _phaseLoader:PhaseLoader;		private var _progressBar:ProgressBar;		private var _imagePaths:Array = [];		private var _bitmaps:Array = [];		private var _container:Sprite;				/*--------------------------------------------------		* コンストラクタ		--------------------------------------------------*/		public function BasicUsage01() {						ResizeManager.init( this );						//PhaseLoader			_phaseLoader = new PhaseLoader( LOADING_PHASES );			_phaseLoader.addEventListener( PhaseLoader.PHASE_COMPLETE, _onPhaseComplete );			_phaseLoader.addEventListener( PhaseLoader.ALL_COMPLETE, _onLoadComplete );			_phaseLoader.addEventListener( PhaseLoader.PROGRESS, _onLoadProgress );			_phaseLoader.load();						//ProgressBar			_progressBar = new ProgressBar( this );			_progressBar.maximum = 1;			_progressBar.value = 0;			addChild( _progressBar );			ResizeManager.add( _progressBar, { x:0.5, y:0.5, considerWidth:true, considerHeight:true } );		}				/*--------------------------------------------------		* 1つのフェーズの完了		--------------------------------------------------*/		private function _onPhaseComplete( i_event:Event ):void {			trace( "_onPhaseComplete phase : " + _phaseLoader.phase );			switch( _phaseLoader.phase ) {				case 0:					_parseXML();					break;				case 1:					_prepareImages();					break;			}		}				//XMLのパース		private function _parseXML():void {			var xml:XML = _phaseLoader.get( XML_PATH );			var images:XMLList = xml.img;			var img:XML;			var path:String;			for each ( img in images ) {				path = img.@src.toString();				_phaseLoader.add( path );				_imagePaths.push( path );			}		}				//画像の準備		private function _prepareImages():void {			var path:String;			var bitmapData:BitmapData;			var thumbnail:BitmapData;			var bitmap:Bitmap;			var matrix = new Matrix();			for each ( path in _imagePaths ) {				bitmapData = _phaseLoader.get( path );				thumbnail = new BitmapData( THUMBNAIL_SIZE, THUMBNAIL_SIZE, false );				thumbnail.draw( bitmapData );				bitmap = new Bitmap( thumbnail );				_bitmaps.push( bitmap );			}		}				/*--------------------------------------------------		* 全てのローディングの完了		--------------------------------------------------*/		private function _onLoadComplete( i_event:Event ):void {			trace( "_onLoadComplete" );			//ProgressBarをフェードアウト			Tweener.addTween( _progressBar, { alpha:0, visible:false, time:1, onComplete:_showThumbnails } );		}				//写真を表示		private function _showThumbnails():void {			//ProgressBarを消す			removeChild( _progressBar );			ResizeManager.remove( _progressBar );			_progressBar = null;						//			_container = new Sprite();			var bitmap:Bitmap;			for each ( bitmap in _bitmaps ) {				_container.addChild( bitmap );			}			_onResize();			ResizeManager.add( _onResize );			_container.alpha = 0;			Tweener.addTween( _container, { alpha:1, time:1 } );			addChild( _container );		}				/*--------------------------------------------------		* リサイズ処理		--------------------------------------------------*/				private function _onResize():void {						//Stage幅に合わせてサムネイルを並べる			var bitmap:Bitmap;			var xx:Number = 0;			var yy:Number = 0;			for each ( bitmap in _bitmaps ) {				bitmap.x = xx;				bitmap.y = yy;				xx += THUMBNAIL_SIZE + 10;				if ( xx + THUMBNAIL_SIZE > ResizeManager.width ) {					xx = 0;					yy += THUMBNAIL_SIZE + 10;				}			}		}				/*--------------------------------------------------		* ローディング中		--------------------------------------------------*/		private function _onLoadProgress( i_event:Event ):void {			_progressBar.value = _phaseLoader.progress;		}					}}